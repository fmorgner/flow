/***************************************************************************
 container.h description
 -----------------------
 begin                 : Fri Oct 29 2010
 copyright             : Copyright (C) 2010 by Manfred Morgner
 email                 : manfred@morgner.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *                                                                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place Suite 330,                                            *
 *   Boston, MA  02111-1307, USA.                                          *
 *                                                                         *
 ***************************************************************************/


#ifndef _CONTAINER_H
#define _CONTAINER_H

#include <map>
#include <list>
#include <string>


// to receive raw input data
typedef std::list<std::string> CListString;

/*****************************************************************************

 This is a bit synthetic, the only reason why this is coded here instead of
 after the class declaration is to show that it's here without requesting
 the code to look behind the class declaration in the hope to find it.

 Map key is a field generated by the server to coordinate data exchange
 between the client and the server and enable write/overwrite/delete commands
 from the client to the server. The server allways generates it.

 *****************************************************************************/

class CContainer;
typedef std::map <std::string, CContainer*> CContainerMapByCLUID;


/*****************************************************************************

 CContainer is a class for storing lines of text received by a flow-server. It
 accumulates these lines one by one. Further it registers a sender and a
 receiver for these data so it is possible to find it in a list of CContainer
 instances by one or both of the criteria.

 Data flow is executed by the application using it. CContainer has no real own
 structure for the received data besides as a list of strings. It knows
 noting about ste structure thesedata are used in.

 The special fields for sender and receiver are only present to prevent
 conflicts the data content.

 *****************************************************************************/


class CContainer : public CListString
  {
  private:
    typedef CListString inherited;

  private:
    static const std::string s_sClassName;

  protected:
    std::string m_sSender;    // given by the client
    std::string m_sRecipient; // given by the client
    std::string m_sMessageId; // given by the server

  public:
             CContainer();
    virtual ~CContainer();

    virtual const std::string& SenderSet( const std::string& rsSender );
    virtual const std::string& SenderGet() const;

    virtual const std::string& RecipientSet( const std::string& rsRecipient );
    virtual const std::string& RecipientGet();

    virtual const std::string& MessageIdSet( const std::string& rsMessageId );
    virtual const std::string& MessageIdGet();

    virtual bool isFor ( const std::string& rsRecipient );
    virtual bool isFrom( const std::string& rsSender );

    // e.g. "a:you", "x:please read", "x:the manual"
    const std::string& operator += ( const std::string& rsElement );

  public:
    static const char scn_command;
    static const char scn_sender;
    static const char scn_recipient;
    static const char scn_content;
    static const char scn_messageid;

  }; // class CContainer

#endif // _PULEX_H
